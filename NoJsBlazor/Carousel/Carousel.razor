@namespace NoJsBlazor
@inherits ListholdingComponentBase<CarouselItem>

<div class="carousel" @attributes="@Attributes">
    <div class="carousel-inner">
        @if (ItemContainer.Length > 0) {
            @for (int i = 0; i < ItemContainer.Length; i++) {
                <div class="carousel-item @ItemContainer[i].slideClass" style="
                        z-index: @ItemContainer[i].zIndex;
                        opacity: @ItemContainer[i].opacity;
                        transform: translateX(@(ItemContainer[i].translateX)%) rotateY(@(ItemContainer[i].rotateY)deg);">
                    @ItemContainer[i].carouselItem.ChildContent
                </div>
            }
        }
        else {
            <CascadingValue Name="Parent" Value="(ListholdingComponentBase<CarouselItem>)this" IsFixed="true">
                @Items
            </CascadingValue>
        }
    </div>
    @if (Overlay != null) {
        <div class="carousel-overlay">
            @Overlay
        </div>
    }
    @if (ControlArrowsEnable) {
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 8 8"
                class="carousel-arrow prev" role="button" @onmousedown="prevTC.OnMouseDown" @ontouchstart="prevTC.OnTouchStart">
            <line x1="-1.5" y1="0" x2="1.5" y2="-3" />
            <line x1="-1.5" y1="0" x2="1.5" y2="3" />
        </svg>

        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 8 8"
                class="carousel-arrow next" role="button" @onmousedown="nextTC.OnMouseDown" @ontouchstart="nextTC.OnTouchStart">
            <line x1="1.5" y1="0" x2="-1.5" y2="-3" />
            <line x1="1.5" y1="0" x2="-1.5" y2="3" />
        </svg>
    }
    @if (IndicatorsEnable) {
        <ol class="carousel-indicators">
            @foreach (int i in Enumerable.Range(0, ItemContainer.Length)) {
                <li role="button" @onmousedown="(MouseEventArgs e) => indicatorTC.OnMouseDown(e, i)" @ontouchstart="(TouchEventArgs e) => indicatorTC.OnTouchStart(e, i)">
                    <div style="opacity: @ItemContainer[i].indicatorOpacity">
                        <div style="width:@(ItemContainer[i].progressBar)%; transition: width @(ItemContainer[i].progressBarTransition)ms linear;"></div>
                    </div>
                </li>
            }
        </ol>
    }
    @if (PlayButtonEnable) {
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-0.7 -1.1 1.95 2.2"
                class="carousel-play-button @(!Running ? "play" : "pause")" role="button" @onmousedown="playButtonTC.OnMouseDown" @ontouchstart="playButtonTC.OnTouchStart">
            @* 1/3 circle => cbrt(1) = (1,0),(-0.5,-0.866),(.0.5,0.866) *@
            @* play trianlge: right, top-left, bottom-left *@
            <polygon points="1,0 -0.5,-0.866 -0.5,0.866" />
            @* pause lines: left, right *@
            <line x1="-0.3" x2="-0.3" y1="-0.666" y2="0.666" />
            <line x1="0.8" y1="-0.666" x2="0.8" y2="0.666" />
        </svg>
    }
</div>
