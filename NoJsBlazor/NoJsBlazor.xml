<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoJsBlazor</name>
    </assembly>
    <members>
        <member name="T:NoJsBlazor.Carousel">
            <summary>
            <para>A Carousel like in Bootstrap. It holds <see cref="T:NoJsBlazor.CarouselItem"/> as items. </para>
            <para>It can also display an overlay, control-arrows, item indicators and a play/stop button.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.ActiveStart">
            <summary>
            <para>Index of the active item at the beginning.</para>
            <para>Default is 0.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Animation">
            <summary>
            <para>Type of swapping animation.</para>
            <para>Default is FadeOut.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.IntervalTime">
            <summary>
            <para>Waiting time before beginning swap animation in ms.</para>
            <para>Default is 6000.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.AutoStartTime">
            <summary>
            <para>Starts interval after [AutoStartTime] ms, if interval not running and no action occurs.</para>
            <para>Value of 0 deactivates autostart.</para>
            <para>Default is 0.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.BeginRunning">
            <summary>
            <para>Carousel Interval starts running or paused.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.ControlArrowsEnable">
            <summary>
            <para>Next/Previous Arrows available</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.IndicatorsEnable">
            <summary>
            <para>Indicators available</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.PlayButtonEnable">
            <summary>
            <para>PlayButton available</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Items">
            <summary>
            <para>Content of the <see cref="T:NoJsBlazor.Carousel"/>.</para>
            <para>This should be a list of <see cref="T:NoJsBlazor.CarouselItem"/> objects.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Overlay">
            <summary>
            Html that will be rendered in the overlay section.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.OnActiveChanged">
            <summary>
            <para>Fires every time after <see cref="P:NoJsBlazor.Carousel.Active">active</see> item changed.</para>
            <para>Parameter is index of the new active item.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.OnRunningChanged">
            <summary>
            <para>Fires every time after the <see cref="P:NoJsBlazor.Carousel.Running">Running</see> state is set.</para>
            <para>Parameter indicates if the carousel is currently running.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Active">
            <summary>
            The Index of the current Active Item.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.Running">
            <summary>
            Indicates if the interval of the carousel is currently running.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Carousel.AutoStartRunning">
            <summary>
            Inidicates if the autoStart Timer is currently ticking.
            </summary>
        </member>
        <member name="M:NoJsBlazor.Carousel.Dispose">
            <summary>
            Disposes Interval Timer and Autostart Timer.
            </summary>
        </member>
        <member name="M:NoJsBlazor.Carousel.SwapCarouselItems(NoJsBlazor.CarouselItem,NoJsBlazor.CarouselItem)">
            <summary>
            <para>Finds the indexes of the 2 given CarouselItems and then executes <see cref="M:NoJsBlazor.Carousel.SwapCarouselItems(System.Int32,System.Int32)"/>.</para>
            <para>If one of the items is not present in the CarouselItem list, an <see cref="T:System.ArgumentException"/> is thrown.</para>
            </summary>
            <param name="carouselItem1"></param>
            <param name="carouselItem2"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NoJsBlazor.Carousel.SwapCarouselItems(System.Int32,System.Int32)">
            <summary>
            <para>Swaps the 2 items in the CarouselItem list at the given indexes.</para>
            <para>The active item is preserved.<br />
            e.g. 0 is active, swap(0, 1)  -&gt; 1 will be active, so the active item won't change.</para>
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
        </member>
        <member name="M:NoJsBlazor.Carousel.StartInterval">
            <summary>
            Starts the interval-timer that automatically change to next item.
            </summary>
        </member>
        <member name="M:NoJsBlazor.Carousel.StopInterval">
            <summary>
            Stops the interval-timer, so the current item will not automatically change.
            </summary>
        </member>
        <member name="T:NoJsBlazor.CarouselAnimation">
            <summary>
            Type of animation, how the items are swapped.
            </summary>
        </member>
        <member name="F:NoJsBlazor.CarouselAnimation.FadeOut">
            <summary>
            Transition on opacity
            </summary>
        </member>
        <member name="F:NoJsBlazor.CarouselAnimation.Slide">
            <summary>
            Transition on translate x-axis
            </summary>
        </member>
        <member name="F:NoJsBlazor.CarouselAnimation.SlideRotate">
            <summary>
            Transition on translate x-axis and rotate y-axis
            </summary>
        </member>
        <member name="T:NoJsBlazor.CarouselItem">
            <summary>
            <para>Wrapper for the content that will be a carousel item.</para>
            <para>This should be placed inside Renderfragment <b>Items</b> of a <see cref="T:NoJsBlazor.Carousel"/> instance.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.CarouselItem.ChildContent">
            <summary>
            Content of this component.
            </summary>
        </member>
        <member name="T:NoJsBlazor.CollapseDiv">
            <summary>
            A container that content can be collapsed.
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.Head">
            <summary>
            <para>Content that is also visible collapsed.</para>
            <para>If clicked on it, it will expand/collapse.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.Content">
            <summary>
            Content that is hidden when collapsed.
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.StartExpanded">
            <summary>
            <para>Initializing collapsed or expanded.</para>
            <para>Default is false.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.OnExpandedChanged">
            <summary>
            <para>Fires every time when collapse state is changed.</para>
            <para>Parameter indicates if the component is currently collapsed.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.Expanded">
            <summary>
            The state of collapsed or expanded.
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDiv.SilentExpandedSetter">
            <summary>
            Sets the state of <see cref="P:NoJsBlazor.CollapseDiv.Expanded"/> without notifying <see cref="P:NoJsBlazor.CollapseDiv.OnExpandedChanged"/>.
            </summary>
        </member>
        <member name="T:NoJsBlazor.ContextMenu">
            <summary>
            <para>A menu that can be toggled and shown at mouse position.</para>
            <para>Triggering the menu is not included.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenu.ChildContent">
            <summary>
            Content of this ContextMenu.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenu.OnToggle">
            <summary>
            <para>Fires every time when <see cref="P:NoJsBlazor.ContextMenu.Expanded">Expanded</see> get changed.</para>
            <para>Value is equal <see cref="P:NoJsBlazor.ContextMenu.Expanded">Expanded</see>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenu.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenu.Expanded">
            <summary>
            The state of collapsed or visible.
            </summary>
        </member>
        <member name="M:NoJsBlazor.ContextMenu.Open(System.Double,System.Double)">
            <summary>
            Display the context menu at the given location.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:NoJsBlazor.ContextMenu.Close">
            <summary>
            Collapses all expanded submenus and closes the context menu.
            </summary>
        </member>
        <member name="M:NoJsBlazor.ContextMenu.SilentOpen(System.Double,System.Double)">
            <summary>
            Display the context menu at the given location without notifying <see cref="P:NoJsBlazor.ContextMenu.OnToggle"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:NoJsBlazor.ContextMenu.SilentClose">
            <summary>
            Collapses all expanded submenus and closes the context menu without notifying <see cref="P:NoJsBlazor.ContextMenu.OnToggle"/>.
            </summary>
        </member>
        <member name="M:NoJsBlazor.ContextMenu.Reset">
            <summary>
            Collapses all expanded submenus.
            </summary>
        </member>
        <member name="T:NoJsBlazor.ContextMenuItem">
            <summary>
            <para>Wrapper for the content that will be a context item.</para>
            <para>This should be placed inside of a <see cref="T:NoJsBlazor.ContextMenu"/> or <see cref="T:NoJsBlazor.ContextSubMenu"/> instance.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenuItem.ChildContent">
            <summary>
            Html that will be displayed.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextMenuItem.OnPressed">
            <summary>
            Invokes every time when this list item get clicked or touched.
            </summary>
        </member>
        <member name="T:NoJsBlazor.ContextSubMenu">
            <summary>
            Another <see cref="T:NoJsBlazor.ContextMenu"/> inside of a <see cref="T:NoJsBlazor.ContextMenu"/> or <see cref="T:NoJsBlazor.ContextSubMenu"/>.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextSubMenu.Head">
            <summary>
            Content that is collapsed visible.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextSubMenu.Items">
            <summary>
            Content that is expanded visible.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextSubMenu.OnToggle">
            <summary>
            <para>Fires every time when <see cref="P:NoJsBlazor.ContextSubMenu.Expanded">Expanded</see> get changed.</para>
            <para>Value is equal <see cref="P:NoJsBlazor.ContextSubMenu.Expanded">Expanded</see>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ContextSubMenu.Expanded">
            <summary>
            The state of collapsed or expanded for this submenu.
            </summary>
            <param name="value">expanded</param>
        </member>
        <member name="P:NoJsBlazor.ContextSubMenu.SilentExpandedSetter">
            <summary>
            Sets the state of <see cref="P:NoJsBlazor.ContextSubMenu.Expanded"/> without notifying <see cref="P:NoJsBlazor.ContextSubMenu.OnToggle"/> of this submenu.
            </summary>
        </member>
        <member name="M:NoJsBlazor.ContextSubMenu.Toggle">
            <summary>
            <para>Expands/Collapses this menu.</para>
            <para>Shorthand for: <see cref="P:NoJsBlazor.ContextSubMenu.Expanded">Expanded</see> = !<see cref="P:NoJsBlazor.ContextSubMenu.Expanded">Expanded</see>;</para>
            </summary>
        </member>
        <member name="T:NoJsBlazor.Dialog">
            <summary>
            A little message window that it is first hidden and can be displayed on demand.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.Title">
            <summary>
            Html that will be displayed inside the head bar.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.Content">
            <summary>
            Html that will be displayed inside the window.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.ShowTitle">
            <summary>
            <para>Indicates whether to skip the <see cref="P:NoJsBlazor.Dialog.Title">Title</see> section.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.Moveable">
            <summary>
            <para>The window can be grabed and draged around the screen.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.ModalScreen">
            <summary>
            <para>If the background should be blurred/unavailable.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.CloseOnModalBackground">
            <summary>
            <para>If on the <see cref="P:NoJsBlazor.Dialog.ModalScreen">ModalBackground</see> a click occurs, whether the window should close or not close.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.OnActiveChanged">
            <summary>
            <para>Invokes every time when the Dialog opens or closes.</para>
            <para>true: dialog got from close to open, false: dialog got from open to closed.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.OnTitlePointerDown">
            <summary>
            Fires if pointer starts on title div.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.OnTitlePointerMove">
            <summary>
            Fires if pointer moves on title div, but only if pointer down is active.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.OnTitlePointerUp">
            <summary>
            Fires if pointer releases on title div.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.XMovement">
            <summary>
            Current offset of x-coordinate, 0 means middle of the screen.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.YMovement">
            <summary>
            Current offset of y-coordinate, 0 means middle of the screen.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.Active">
            <summary>
            true -> window is shown<br />
            false -> window is closed
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.SilentActiveSetter">
            <summary>
            Sets the state of <see cref="P:NoJsBlazor.Dialog.Active"/> without notifying <see cref="P:NoJsBlazor.Dialog.OnActiveChanged"/>.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Dialog.TitleDiv">
            <summary>
            <para>The Container Element of the title head bar.</para>
            <para>You can use this to register mouse capture.</para>
            </summary>
        </member>
        <member name="M:NoJsBlazor.Dialog.Open">
            <summary>
            <para>Display the window.</para>
            <para>The same as setting XMovement/YMovement = 0 and Active = true</para>
            </summary>
        </member>
        <member name="M:NoJsBlazor.Dialog.OpenWithLastPosition">
            <summary>
            <para>Display the window at the last moved position.</para>
            <para>The same as Active = true</para>
            </summary>
        </member>
        <member name="M:NoJsBlazor.Dialog.Close">
            <summary>
            <para>Closes the window.</para>
            <para>The same as Active = false</para>
            </summary>
        </member>
        <member name="T:NoJsBlazor.EditFormInput">
            <summary>
            <para>Input field with a embedded label.</para>
            <para>It can only be used inside EditForm.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.OnChange">
            <summary>
            <para>Fires every time item looses focus and value has changed.</para>
            <para>This or ValueChanged can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Title">
            <summary>
            <para>Sets properties Label, Id, Name and Autocomplete to the given string (Autocomplete to true).</para>
            <para>Returns a comma seperated string with this 4 properties (Label,Id,Name,Autocomplete).</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Label">
            <summary>
            Displayed text of this Input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Type">
            <summary>
            <para>Sets the type attribute.</para>
            <para>e.g.<br></br>
            normal text(abcd)<br></br>
            password(****)<br></br>
            numberField(0123)<br></br>
            …</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Id">
            <summary>
            Sets the "id"-attribute in input field and the "for"-attribute in the label.
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Name">
            <summary>
            Sets the "name"-attribute in the input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.Autocomplete">
            <summary>
            <para>Sets the "autocomplete"-attribute in the input field.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.EditFormInput.InputAttributes">
            <summary>
            These values are applied to the input field.
            </summary>
        </member>
        <member name="T:NoJsBlazor.Input">
            <summary>
            <para>Input field with a embedded label.</para>
            <para>Don't use it inside EditForm, use <see cref="T:NoJsBlazor.EditFormInput">EditFormInput</see> instead.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Value">
            <summary>
            <para>Value of this Input field.</para>
            <para>Should be used as two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.ValueChanged">
            <summary>
            <para>Fires every time <see cref="P:NoJsBlazor.Input.Value"/> changes.</para>
            <para>This or <see cref="P:NoJsBlazor.Input.OnChange"/> can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Attributes">
            <summary>
            Captures unmatched values. The values are applied to the outer div container and not to the input field
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.OnChange">
            <summary>
            <para>Fires every time item looses focus and value has changed.</para>
            <para>This or ValueChanged can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Title">
            <summary>
            <para>Sets properties Label, Id, Name and Autocomplete to the given string (Autocomplete to true).</para>
            <para>Returns a comma seperated string with this 4 properties (Label,Id,Name,Autocomplete).</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Label">
            <summary>
            Displayed text of this Input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Type">
            <summary>
            <para>Sets the type attribute.</para>
            <para>e.g.<br></br>
            normal text(abcd)<br></br>
            password(****)<br></br>
            numberField(0123)<br></br>
            …</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Id">
            <summary>
            Sets the "id"-attribute in input field and the "for"-attribute in the label.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Name">
            <summary>
            Sets the "name"-attribute in the input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.Autocomplete">
            <summary>
            <para>Sets the "autocomplete"-attribute in the input field.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Input.InputAttributes">
            <summary>
            These values are applied to the input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.OnChange">
            <summary>
            <para>Fires every time item looses focus and value has changed.</para>
            <para>This or ValueChanged can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Title">
            <summary>
            <para>Sets properties Label, Id, Name and Autocomplete to the given string (Autocomplete to true).</para>
            <para>Returns a comma seperated string with this 4 properties (Label,Id,Name,Autocomplete).</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Label">
            <summary>
            Displayed text of this Input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Type">
            <summary>
            <para>Sets the type attribute.</para>
            <para>e.g.<br></br>
            normal text(abcd)<br></br>
            password(****)<br></br>
            numberField(0123)<br></br>
            …</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Id">
            <summary>
            Sets the "id"-attribute in input field and the "for"-attribute in the label.
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Name">
            <summary>
            Sets the "name"-attribute in the input field.
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.Autocomplete">
            <summary>
            <para>Sets the "autocomplete"-attribute in the input field.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.InputBase.InputAttributes">
            <summary>
            These values are applied to the input field.
            </summary>
        </member>
        <member name="T:NoJsBlazor.NavBar">
            <summary>
            A container that contains a nested list of items/links.<br />
            It automatically collapses to phone view at a configurable threshold.<br />
            Optional it can also show a brand.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.Brand">
            <summary>
            <para>Content which represents your site.</para>
            <para>If it is null, the corresponding parts are not rendered.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.Items">
            <summary>
            <para>This should be a list of <see cref="T:NoJsBlazor.NavBarMenu"/> of <see cref="T:NoJsBlazor.NavBarItem"/>/<see cref="T:NoJsBlazor.NavBarLink"/> objects.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.Breakpoint">
            <summary>
            <para>Changes at the given width between phone and desktop view.</para>
            <para>Default is <see cref="F:NoJsBlazor.NavBarBreakpoint.none"/>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.OnToggle">
            <summary>
            <para>Fires every time when <see cref="P:NoJsBlazor.NavBar.Expanded">Expanded</see> get changed.</para>
            <para>Value is equal <see cref="P:NoJsBlazor.NavBar.Expanded">Expanded</see>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.Expanded">
            <summary>
            Value for Expanding or Collapsing the navbar.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBar.SilentExpandedSetter">
            <summary>
            Sets the state of <see cref="P:NoJsBlazor.NavBar.Expanded"/> without notifying <see cref="P:NoJsBlazor.NavBar.OnToggle"/>.
            </summary>
        </member>
        <member name="M:NoJsBlazor.NavBar.Toggle">
            <summary>
            <para>Expands/Collapses this menu.</para>
            <para>Shorthand for: <see cref="P:NoJsBlazor.NavBar.Expanded">Expanded</see> = !<see cref="P:NoJsBlazor.NavBar.Expanded">Expanded</see>;</para>
            </summary>
        </member>
        <member name="M:NoJsBlazor.NavBar.Reset">
            <summary>
            Collapses this menu and all expanded submenus.
            </summary>
        </member>
        <member name="T:NoJsBlazor.NavBarBreakpoint">
            <summary>
            Width values for changing between phone and desktop view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.none">
            <summary>
            Changes never, stays always at desktop view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px500">
            <summary>
            Below width of 500px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px600">
            <summary>
            Below width of 600px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px700">
            <summary>
            Below width of 700px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px800">
            <summary>
            Below width of 800px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px900">
            <summary>
            Below width of 900px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1000">
            <summary>
            Below width of 1000px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1100">
            <summary>
            Below width of 1100px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1200">
            <summary>
            Below width of 1200px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1300">
            <summary>
            Below width of 1300px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1400">
            <summary>
            Below width of 1400px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.px1500">
            <summary>
            Below width of 1500px is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em30">
            <summary>
            Below width of 30em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em40">
            <summary>
            Below width of 40em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em50">
            <summary>
            Below width of 50em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em60">
            <summary>
            Below width of 60em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em70">
            <summary>
            Below width of 70em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em80">
            <summary>
            Below width of 80em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em90">
            <summary>
            Below width of 90em is phone view.
            </summary>
        </member>
        <member name="F:NoJsBlazor.NavBarBreakpoint.em100">
            <summary>
            Below width of 100em is phone view.
            </summary>
        </member>
        <member name="T:NoJsBlazor.NavBarMenu">
            <summary>
            <para>A single menu that can hold other <see cref="T:NoJsBlazor.NavBarMenu"/> and <see cref="T:NoJsBlazor.NavBarItem"/>/<see cref="T:NoJsBlazor.NavBarLink"/>.</para>
            <para>This should be placed inside of a <see cref="T:NoJsBlazor.NavBar"/> or <see cref="T:NoJsBlazor.NavBarMenu"/>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarMenu.Head">
            <summary>
            Content that is collapsed visible.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarMenu.Items">
            <summary>
            Content that is expanded visible.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarMenu.OnToggle">
            <summary>
            <para>Fires every time when <see cref="P:NoJsBlazor.NavBarMenu.Expanded">Expanded</see> get changed.</para>
            <para>Value is equal <see cref="P:NoJsBlazor.NavBarMenu.Expanded">Expanded</see>.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarMenu.Expanded">
            <summary>
            Value for expanding or collapsing this submenu.
            </summary>
            <param name="value">expanded</param>
        </member>
        <member name="P:NoJsBlazor.NavBarMenu.SilentExpandedSetter">
            <summary>
            Sets the state of <see cref="P:NoJsBlazor.NavBarMenu.Expanded"/> without notifying <see cref="P:NoJsBlazor.NavBarMenu.OnToggle"/> of this submenu.
            </summary>
        </member>
        <member name="M:NoJsBlazor.NavBarMenu.Toggle">
            <summary>
            <para>Expands/Collapses this menu.</para>
            <para>Shorthand for: <see cref="P:NoJsBlazor.NavBarMenu.Expanded">Expanded</see> = !<see cref="P:NoJsBlazor.NavBarMenu.Expanded">Expanded</see>;</para>
            </summary>
        </member>
        <member name="T:NoJsBlazor.ProgressBar">
            <summary>
            Base Class for all ProgressBarComponents
            </summary>
        </member>
        <member name="P:NoJsBlazor.ProgressBar.Progress">
            <summary>
            <para>The relative amount of the progress Bar.</para>
            <para>0 means empty, 1 means full.</para>
            <para>Default is 0.0</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ProgressBar.Text">
            <summary>
            <para>Displaying text of this component.</para>
            <para>Default is <see cref="F:System.String.Empty"/></para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.ProgressBar.Content">
            <summary>
            Accessing <see cref="P:NoJsBlazor.ProgressBar.Progress"/> and <see cref="P:NoJsBlazor.ProgressBar.Text"/> together. Also rerenders the component.
            </summary>
        </member>
        <member name="P:NoJsBlazor.ProgressBar.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="T:NoJsBlazor.Slider`1">
            <summary>
            An object that holds a ranged input together with a decrease and increase button and a label indicating the current value.
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Value">
            <summary>
            <para>Value of the Slider.</para>
            <para>Should be used as two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.ValueChanged">
            <summary>
            <para>Invokes every time Value get changed with:<br />
            LeftButton, RightButton, Slider or EditField.</para>
            <para>This or <see cref="P:NoJsBlazor.Slider`1.OnChange"/> can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.OnChange">
            <summary>
            <para>Invokes every time Value get changed with:<br />
            LeftButton, RightButton, Slider (only on release) or EditField.</para>
            <para>This or <see cref="P:NoJsBlazor.Slider`1.ValueChanged"/> can be used for two-way-binding.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Title">
            <summary>
            <para>An optional label.</para>
            <para>Default is <see cref="F:System.String.Empty"/></para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Min">
            <summary>
            <para>Slider lower bounds.</para>
            <para>Default is 0.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Max">
            <summary>
            <para>Slider upper bounds.</para>
            <para>Default is 10.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Step">
            <summary>
            <para>Slider precision.</para>
            <para>Default is 1.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Enabled">
            <summary>
            <para>Enables or disables the controls (left-button, right-button, slider-thumb).</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Editable">
            <summary>
            <para>Indicates if the user is able to edit the number directly.</para>
            <para>Technically the number is displayed in a input field instead of a label.</para>
            <para>Dafault is false.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.LeftButtonContent">
            <summary>
            <para>Content inside the left Button.</para>
            <para>Default is a svg showing "🡸".</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.RightButtonContent">
            <summary>
            <para>Content inside the right Button.</para>
            <para>Default is a svg showing "🡺".</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Display">
            <summary>
            <para>The way the value should be printed.</para>
            <para>Default is value.ToString().</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.ParseEdit">
            <summary>
            <para>Parsing function for the edit field.</para>
            <para>It should get the content of the edit field as string and return the appropriated number. It should return null if the value is not valid.</para>
            <para>Default try parses number and when succeed, clamps to Min,Max-bounds.</para>
            </summary>
        </member>
        <member name="P:NoJsBlazor.Slider`1.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="T:NoJsBlazor.CoordinateTracker">
            <summary>
            This class can save a 2D-coordinate, calculates the difference to the next coordinate, then update the coordinate and calculates the next difference and so on.
            </summary>
        </member>
        <member name="F:NoJsBlazor.CoordinateTracker.x">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="F:NoJsBlazor.CoordinateTracker.y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="M:NoJsBlazor.CoordinateTracker.SetCoordinate(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            <para>Sets the coordinates x/y with ClientX/ClientY and returns those.</para>
            <para>Normally called in onpointerdown event.</para>
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:NoJsBlazor.CoordinateTracker.MoveCoordinate(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            <para>Sets the coordinates x/y with ClientX/ClientY and returns the difference to it's previous.</para>
            <para>Normally called in onpointermove event.</para>
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:NoJsBlazor.ListableComponentBase`1">
            <summary>
            A Component that can be hold by <see cref="T:NoJsBlazor.ListholdingComponentBase`1"/> in a List.
            </summary>
            <typeparam name="T">Component base class of the <see cref="T:NoJsBlazor.ListableComponentBase`1"/></typeparam>
        </member>
        <member name="M:NoJsBlazor.ListableComponentBase`1.OnInitialized">
            <summary>
            <para>Registering the component at the parent <see cref="T:NoJsBlazor.ListableComponentBase`1">ListableComponentBase</see>.</para>
            <para>Assumes the reference <see cref="P:NoJsBlazor.ListableComponentBase`1.Parent" /> is set.</para>
            </summary>
        </member>
        <member name="M:NoJsBlazor.ListableComponentBase`1.Dispose">
            <summary>
            <para>Removing the component from the parent <see cref="T:NoJsBlazor.ListableComponentBase`1">ListableComponentBase</see>.</para>
            <para>Assumes the reference <see cref="P:NoJsBlazor.ListableComponentBase`1.Parent" /> is set.</para>
            </summary>
        </member>
        <member name="T:NoJsBlazor.ListholdingComponentBase`1">
            <summary>
            <para>A component that can hold other components in a list.</para>
            <para>The other components are from type <see cref="T:NoJsBlazor.ListableComponentBase`1"/>, so they register itself on initializing in the list.</para>
            </summary>
            <typeparam name="T">Component base class of the <see cref="T:NoJsBlazor.ListableComponentBase`1"/></typeparam>
        </member>
        <member name="F:NoJsBlazor.ListholdingComponentBase`1.childList">
            <summary>
            List of all registered <see cref="T:NoJsBlazor.ListableComponentBase`1">ListableComponentBase</see> childs.
            </summary>
        </member>
        <member name="M:NoJsBlazor.ListholdingComponentBase`1.Add(`0)">
            <summary>
            API for <see cref="T:NoJsBlazor.ListableComponentBase`1"/> objects to add themselves to the list.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:NoJsBlazor.ListholdingComponentBase`1.Remove(`0)">
            <summary>
            API for <see cref="T:NoJsBlazor.ListableComponentBase`1"/> objects to remove themselves to the list.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:NoJsBlazor.ListholdingComponentBase`1.ChildCount">
            <summary>
            Gives the current number of registered childs.
            </summary>
        </member>
        <member name="P:NoJsBlazor.CollapseDivArrow.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarItem.Head">
            <summary>
            Will be automatically set by the parent.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarItem.ChildContent">
            <summary>
            Html that will be displayed.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarLink.Parent">
            <summary>
            Will be automatically set by the root.
            </summary>
        </member>
        <member name="P:NoJsBlazor.NavBarLink.Attributes">
            <summary>
            Captures unmatched values
            </summary>
        </member>
        <member name="T:InlineCompositionAttributes.InlineBaseAttribute">
            <summary>
            <para>Marks this class/struct as inlineable, so it can be listed in a <see cref="T:InlineCompositionAttributes.InlineAttribute`1"/> Attribute.</para>
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineBaseAttribute.IgnoreInheritenceAndImplements">
            <summary>
            If set the generator ignores the inherited class and implemented interfaces of this type.
            </summary>
        </member>
        <member name="T:InlineCompositionAttributes.NoInlineAttribute">
            <summary>
            <para>Only usefule in a class/struct with a <see cref="T:InlineCompositionAttributes.InlineBaseAttribute"/>.</para>
            <para>Skips/Ignores this member.</para>
            </summary>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`1">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`2">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`3">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`4">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`5">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`6">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`7">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`8">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
            <typeparam name="T8">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`9">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
            <typeparam name="T8">class/struct which members gets inlined.</typeparam>
            <typeparam name="T9">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`10">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
            <typeparam name="T8">class/struct which members gets inlined.</typeparam>
            <typeparam name="T9">class/struct which members gets inlined.</typeparam>
            <typeparam name="T10">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`11">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
            <typeparam name="T8">class/struct which members gets inlined.</typeparam>
            <typeparam name="T9">class/struct which members gets inlined.</typeparam>
            <typeparam name="T10">class/struct which members gets inlined.</typeparam>
            <typeparam name="T11">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineAttribute`12">
            <summary>
            Generates a partial class/struct which includes all members listed in the typeParams.
            </summary>
            <typeparam name="T1">class/struct which members gets inlined.</typeparam>
            <typeparam name="T2">class/struct which members gets inlined.</typeparam>
            <typeparam name="T3">class/struct which members gets inlined.</typeparam>
            <typeparam name="T4">class/struct which members gets inlined.</typeparam>
            <typeparam name="T5">class/struct which members gets inlined.</typeparam>
            <typeparam name="T6">class/struct which members gets inlined.</typeparam>
            <typeparam name="T7">class/struct which members gets inlined.</typeparam>
            <typeparam name="T8">class/struct which members gets inlined.</typeparam>
            <typeparam name="T9">class/struct which members gets inlined.</typeparam>
            <typeparam name="T10">class/struct which members gets inlined.</typeparam>
            <typeparam name="T11">class/struct which members gets inlined.</typeparam>
            <typeparam name="T12">class/struct which members gets inlined.</typeparam>
        </member>
        <member name="T:InlineCompositionAttributes.InlineMethodAttribute">
            <summary>
            The Method under this attribute will be inlined in the method given by <see cref="P:InlineCompositionAttributes.InlineMethodAttribute.MethodName"/>.
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineMethodAttribute.MethodName">
            <summary>
            The method name as string literal.
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineMethodAttribute.Modifiers">
            <summary>
            <para>Modifiers e.g. "public static extern", "protected abstract"</para>
            <para>If null, the method modifiers will be taken.</para>
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineMethodAttribute.First">
            <summary>
            Indicates whether this method gets inlined before the other methods or after.
            </summary>
        </member>
        <member name="T:InlineCompositionAttributes.InlineConstructorAttribute">
            <summary>
            The Method under this attribute will be inlined in the constructor.
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineConstructorAttribute.Modifiers">
            <summary>
            <para>Modifiers e.g. "public", "protected", "private"</para>
            <para>If null, the method modifiers will be taken.</para>
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineConstructorAttribute.First">
            <summary>
            Indicates whether this method gets inlined before the other constructors or after.
            </summary>
        </member>
        <member name="T:InlineCompositionAttributes.InlineFinalizerAttribute">
            <summary>
            The Method under this attribute will be inlined in the finalizer.
            </summary>
        </member>
        <member name="P:InlineCompositionAttributes.InlineFinalizerAttribute.First">
            <summary>
            Indicates whether this method gets inlined before the other finalizers or after.
            </summary>
        </member>
    </members>
</doc>
